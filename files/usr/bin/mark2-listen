#!/usr/bin/env python3
# Copyright 2022 Mycroft AI Inc.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# -----------------------------------------------------------------------------
#
# Listen to messages from the Mark II message bus.
#
# Example:
# mark2-listen 'event.type.1' 'event.type.2' ...
#
import argparse
import asyncio
import json
import sys
import time

from websockets import connect


async def main():
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "--uri",
        default="ws://127.0.0.1:8181/core",
        help="URI of websocket messagebus",
    )
    parser.add_argument(
        "--reconnect-delay",
        type=float,
        default=1.0,
        help="Seconds between reconnection attempts",
    )
    args, rest = parser.parse_known_args()
    message_types = set(rest)

    while True:
        try:
            async with connect(args.uri) as websocket:
                while True:
                    try:
                        json_str = await websocket.recv()
                    except KeyboardInterrupt:
                        return

                    message = json.loads(json_str)
                    if (not message_types) or (message["type"] in message_types):
                        print(json_str, flush=True)
        except Exception:
            print("Disconnected", file=sys.stderr)
            time.sleep(args.reconnect_delay)
            print("Reconnecting...", file=sys.stderr)


# -----------------------------------------------------------------------------

if __name__ == "__main__":
    asyncio.run(main())
